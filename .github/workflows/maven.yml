name: Java CI with Maven and Documentation Generation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn -B compile --file pom.xml
      
    - name: Run unit and integration tests
      run: mvn -B test --file pom.xml -Dtest.profile=parallel
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/

  documentation-generation:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Set up Node.js for Playwright
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright and documentation dependencies
      run: |
        # Update package lists
        sudo apt-get update
        
        # Install basic dependencies
        sudo apt-get install -y \
          xvfb \
          pandoc \
          wget \
          unzip
        
        # Install Playwright dependencies using npx (more reliable)
        npx --yes playwright@1.40.0 install-deps chromium
        
        # Verify installation
        echo "✅ Playwright dependencies installed successfully"
        
    - name: Compile application
      run: mvn -B compile --file pom.xml
      
    - name: Generate Playwright documentation with headless mode
      run: |
        echo "🚀 Generating user documentation with Playwright..."
        # Run documentation test in headless mode for CI
        mvn test -Dtest=PersonalCustomerAccountOpeningTutorialTest \
          -Dplaywright.headless=true \
          -Dplaywright.slowmo=1000 \
          -Dplaywright.record=true \
          -Dplaywright.browser=chromium
          
    - name: Generate user manual from screenshots and videos
      run: |
        echo "📚 Generating user manual from captured media..."
        mvn exec:java -Dexec.mainClass="id.ac.tazkia.minibank.util.UserManualGenerator"
        
        echo "📂 Copying generated documentation to docs/user-manual..."
        # Create docs/user-manual directory if it doesn't exist
        mkdir -p docs/user-manual
        
        # Copy all generated content from target to docs folder
        if [ -d "target/playwright-documentation" ]; then
            cp -r target/playwright-documentation/* docs/user-manual/
            echo "✅ Documentation successfully copied to docs/user-manual/"
        else
            echo "❌ Error: target/playwright-documentation directory not found"
            exit 1
        fi
        
    - name: Prepare documentation for deployment
      run: |
        echo "📦 Preparing documentation for GitHub Pages..."
        
        # Create pages directory
        mkdir -p pages
        
        # Copy documentation to pages directory
        cp -r docs/user-manual/* pages/
        
        # Create main index.html that redirects to the user manual
        cat > pages/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="id">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="refresh" content="0; url=panduan-pembukaan-rekening-nasabah-personal.html">
            <title>Aplikasi Minibank - Dokumentasi Pengguna</title>
            <style>
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    text-align: center; 
                    padding: 50px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    min-height: 100vh;
                    margin: 0;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .container {
                    background: rgba(255,255,255,0.1);
                    padding: 40px;
                    border-radius: 15px;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255,255,255,0.2);
                }
                h1 { 
                    margin-bottom: 20px; 
                    font-size: 2.5em;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                }
                p { 
                    font-size: 1.2em; 
                    margin-bottom: 30px;
                }
                .redirect-link {
                    display: inline-block;
                    padding: 15px 30px;
                    background: rgba(255,255,255,0.2);
                    color: white;
                    text-decoration: none;
                    border-radius: 8px;
                    border: 2px solid rgba(255,255,255,0.3);
                    transition: all 0.3s ease;
                    font-weight: bold;
                }
                .redirect-link:hover {
                    background: rgba(255,255,255,0.3);
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
                }
        EOF
        
        # Add current timestamp
        echo "                .timestamp { font-size: 0.9em; margin-top: 30px; opacity: 0.8; }" >> pages/index.html
        echo "            </style>" >> pages/index.html
        echo "        </head>" >> pages/index.html
        echo "        <body>" >> pages/index.html
        echo "            <div class=\"container\">" >> pages/index.html
        echo "                <h1>🏦 Aplikasi Minibank</h1>" >> pages/index.html
        echo "                <p>Dokumentasi Pengguna - Sistem Perbankan Syariah</p>" >> pages/index.html
        echo "                <p>Anda akan dialihkan ke panduan pengguna...</p>" >> pages/index.html
        echo "                <a href=\"panduan-pembukaan-rekening-nasabah-personal.html\" class=\"redirect-link\">Buka Panduan Pengguna</a>" >> pages/index.html
        echo "                <div class=\"timestamp\">📅 Diperbarui: $(date '+%d %B %Y %H:%M WIB')</div>" >> pages/index.html
        echo "            </div>" >> pages/index.html
        echo "        </body>" >> pages/index.html
        echo "        </html>" >> pages/index.html
        
        # Convert markdown to HTML for better web display
        if command -v pandoc > /dev/null; then
            echo "🔄 Converting Markdown to HTML..."
            pandoc pages/panduan-pembukaan-rekening-nasabah-personal.md \
              -o pages/panduan-pembukaan-rekening-nasabah-personal.html \
              --standalone \
              --css=https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css \
              --metadata title="Panduan Pembukaan Rekening Nasabah Personal" \
              --toc \
              --toc-depth=3
        else
            echo "⚠️ Pandoc not available, keeping Markdown format"
            # Create a simple HTML wrapper for the markdown
            cat > pages/panduan-pembukaan-rekening-nasabah-personal.html << 'EOF'
        <!DOCTYPE html>
        <html lang="id">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Panduan Pembukaan Rekening Nasabah Personal</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
                body { padding: 20px 0; }
                .container { max-width: 1200px; }
                img { max-width: 100%; height: auto; margin: 10px 0; border: 1px solid #dee2e6; border-radius: 5px; }
                pre { background: #f8f9fa; padding: 15px; border-radius: 5px; }
                .toc { background: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 30px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="alert alert-info" role="alert">
                            <strong>📚 Dokumentasi Aplikasi Minibank</strong><br>
                            Panduan ini dibuat secara otomatis menggunakan Playwright dan GitHub Actions.
                            <a href="README.html" class="alert-link">Lihat daftar panduan lainnya</a>
                        </div>
                        <iframe src="panduan-pembukaan-rekening-nasabah-personal.md" width="100%" height="800" style="border: none;"></iframe>
                        <div class="mt-3">
                            <a href="panduan-pembukaan-rekening-nasabah-personal.md" class="btn btn-outline-primary" target="_blank">📄 Lihat file Markdown asli</a>
                            <a href="README.md" class="btn btn-outline-secondary" target="_blank">📋 Kembali ke daftar panduan</a>
                        </div>
                    </div>
                </div>
            </div>
        </body>
        </html>
        EOF
        fi
        
        # Create README.html for better web navigation  
        cat > pages/README.html << 'EOF'
        <!DOCTYPE html>
        <html lang="id">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Dokumentasi Pengguna - Aplikasi Minibank</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
        </head>
        <body>
            <div class="container mt-5">
                <div class="row">
                    <div class="col-lg-8 offset-lg-2">
                        <iframe src="README.md" width="100%" height="600" style="border: 1px solid #dee2e6; border-radius: 5px;"></iframe>
                    </div>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        echo "✅ Documentation prepared successfully!"
        
        # Show directory structure for debugging
        echo "📁 Pages directory structure:"
        ls -la pages/
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: user-documentation
        path: pages/
        retention-days: 30
        
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './pages'

  deploy-pages:
    runs-on: ubuntu-latest
    needs: documentation-generation
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
